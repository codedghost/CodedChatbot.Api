# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

name: 1.0.$(BuildID)

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '087f7b3b-2160-4d35-8fb9-36edb3d5651b'
- task: DownloadSecureFile@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    secureFile: 'DevApiArchConfig.json'
- task: DownloadSecureFile@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    secureFile: 'ApiArchConfig.json'
- task: CmdLine@2
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    script: 'cp $(Agent.TempDirectory)/DevApiArchConfig.json $(Build.Repository.LocalPath)/CoreCodedChatbot.Api/config.json'
- task: CmdLine@2
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    script: 'cp $(Agent.TempDirectory)/ApiArchConfig.json $(Build.Repository.LocalPath)/CoreCodedChatbot.Api/config.json'
- task: DownloadSecureFile@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    secureFile: 'devApiHosting.json'
- task: DownloadSecureFile@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    secureFile: 'prodApiHosting.json'
- task: CmdLine@2
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    script: 'cp $(Agent.TempDirectory)/devApiHosting.json $(Build.Repository.LocalPath)/CoreCodedChatbot.Api/config.json'
- task: CmdLine@2
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    script: 'cp $(Agent.TempDirectory)/prodApiHosting.json $(Build.Repository.LocalPath)/CoreCodedChatbot.Api/config.json'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: ApiAppDrop copy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: ApiAppDrop
